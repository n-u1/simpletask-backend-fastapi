"""initial_migration

Revision ID: a70f306364c7
Revises: 
Create Date: 2025-06-12 19:16:56.545089+09:00

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'a70f306364c7'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('email', sa.String(length=255), nullable=False, comment='メールアドレス（ログインID）'),
    sa.Column('password_hash', sa.String(length=255), nullable=False, comment='Argon2ハッシュ化されたパスワード'),
    sa.Column('display_name', sa.String(length=20), nullable=False, comment='表示名'),
    sa.Column('avatar_url', sa.String(length=500), nullable=True, comment='アバター画像URL'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='アカウント有効フラグ'),
    sa.Column('is_verified', sa.Boolean(), nullable=False, comment='メールアドレス認証済みフラグ'),
    sa.Column('last_login_at', sa.DateTime(timezone=True), nullable=True, comment='最終ログイン日時'),
    sa.Column('failed_login_attempts', sa.Integer(), nullable=False, comment='連続ログイン失敗回数'),
    sa.Column('locked_until', sa.DateTime(timezone=True), nullable=True, comment='アカウントロック解除日時'),
    sa.Column('id', sa.UUID(), nullable=False, comment='プライマリキー（UUID）'),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, comment='作成日時（UTC）'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False, comment='更新日時（UTC）'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users'))
    )
    op.create_index('ix_users_active_verified', 'users', ['is_active', 'is_verified'], unique=False)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index('ix_users_email_active', 'users', ['email', 'is_active'], unique=False)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index('ix_users_last_login', 'users', ['last_login_at'], unique=False)
    op.create_table('tags',
    sa.Column('user_id', sa.UUID(), nullable=False, comment='タグの所有者ID'),
    sa.Column('name', sa.String(length=20), nullable=False, comment='タグ名'),
    sa.Column('color', sa.String(length=7), nullable=False, comment='タグの表示色（16進数カラーコード）'),
    sa.Column('description', sa.String(length=200), nullable=True, comment='タグの説明'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='アクティブフラグ（ソフトデリート用）'),
    sa.Column('id', sa.UUID(), nullable=False, comment='プライマリキー（UUID）'),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, comment='作成日時（UTC）'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False, comment='更新日時（UTC）'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_tags_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_tags')),
    sa.UniqueConstraint('user_id', 'name', name='uq_tags_user_name')
    )
    op.create_index('ix_tags_active', 'tags', ['is_active'], unique=False)
    op.create_index(op.f('ix_tags_id'), 'tags', ['id'], unique=False)
    op.create_index('ix_tags_user_active', 'tags', ['user_id', 'is_active'], unique=False)
    op.create_index(op.f('ix_tags_user_id'), 'tags', ['user_id'], unique=False)
    op.create_index('ix_tags_user_name', 'tags', ['user_id', 'name'], unique=False)
    op.create_table('tasks',
    sa.Column('user_id', sa.UUID(), nullable=False, comment='タスクの所有者ID'),
    sa.Column('title', sa.String(length=20), nullable=False, comment='タスクタイトル'),
    sa.Column('description', sa.Text(), nullable=True, comment='タスクの詳細説明'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='タスクステータス（todo, in_progress, done, archived）'),
    sa.Column('priority', sa.String(length=10), nullable=False, comment='タスク優先度（low, medium, high, urgent）'),
    sa.Column('due_date', sa.DateTime(timezone=True), nullable=True, comment='タスクの期限日時（UTC）'),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True, comment='タスク完了日時（UTC）'),
    sa.Column('position', sa.Integer(), nullable=False, comment='表示順序（小さい値ほど上位）'),
    sa.Column('id', sa.UUID(), nullable=False, comment='プライマリキー（UUID）'),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, comment='作成日時（UTC）'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False, comment='更新日時（UTC）'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_tasks_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_tasks'))
    )
    op.create_index('ix_tasks_completed_at', 'tasks', ['completed_at'], unique=False)
    op.create_index('ix_tasks_created_at', 'tasks', ['created_at'], unique=False)
    op.create_index(op.f('ix_tasks_id'), 'tasks', ['id'], unique=False)
    op.create_index('ix_tasks_position', 'tasks', ['user_id', 'status', 'position'], unique=False)
    op.create_index('ix_tasks_user_due_date', 'tasks', ['user_id', 'due_date'], unique=False)
    op.create_index(op.f('ix_tasks_user_id'), 'tasks', ['user_id'], unique=False)
    op.create_index('ix_tasks_user_priority', 'tasks', ['user_id', 'priority'], unique=False)
    op.create_index('ix_tasks_user_status', 'tasks', ['user_id', 'status'], unique=False)
    op.create_table('task_tags',
    sa.Column('task_id', sa.UUID(), nullable=False, comment='関連付けるタスクID'),
    sa.Column('tag_id', sa.UUID(), nullable=False, comment='関連付けるタグID'),
    sa.Column('id', sa.UUID(), nullable=False, comment='プライマリキー（UUID）'),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, comment='作成日時（UTC）'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False, comment='更新日時（UTC）'),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], name=op.f('fk_task_tags_tag_id_tags'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], name=op.f('fk_task_tags_task_id_tasks'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_task_tags')),
    sa.UniqueConstraint('task_id', 'tag_id', name='uq_task_tags_task_tag')
    )
    op.create_index(op.f('ix_task_tags_id'), 'task_tags', ['id'], unique=False)
    op.create_index('ix_task_tags_tag_id', 'task_tags', ['tag_id'], unique=False)
    op.create_index('ix_task_tags_task_id', 'task_tags', ['task_id'], unique=False)
    op.create_index('ix_task_tags_task_tag', 'task_tags', ['task_id', 'tag_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_task_tags_task_tag', table_name='task_tags')
    op.drop_index('ix_task_tags_task_id', table_name='task_tags')
    op.drop_index('ix_task_tags_tag_id', table_name='task_tags')
    op.drop_index(op.f('ix_task_tags_id'), table_name='task_tags')
    op.drop_table('task_tags')
    op.drop_index('ix_tasks_user_status', table_name='tasks')
    op.drop_index('ix_tasks_user_priority', table_name='tasks')
    op.drop_index(op.f('ix_tasks_user_id'), table_name='tasks')
    op.drop_index('ix_tasks_user_due_date', table_name='tasks')
    op.drop_index('ix_tasks_position', table_name='tasks')
    op.drop_index(op.f('ix_tasks_id'), table_name='tasks')
    op.drop_index('ix_tasks_created_at', table_name='tasks')
    op.drop_index('ix_tasks_completed_at', table_name='tasks')
    op.drop_table('tasks')
    op.drop_index('ix_tags_user_name', table_name='tags')
    op.drop_index(op.f('ix_tags_user_id'), table_name='tags')
    op.drop_index('ix_tags_user_active', table_name='tags')
    op.drop_index(op.f('ix_tags_id'), table_name='tags')
    op.drop_index('ix_tags_active', table_name='tags')
    op.drop_table('tags')
    op.drop_index('ix_users_last_login', table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index('ix_users_email_active', table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index('ix_users_active_verified', table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
